# sample arguments for bash script

echo -e "#####################\n$(date "+# DATE: %m/%d/%Y  #%n# TIME: %r #")\n#####################"

echo "Argument 1 is $1"
echo "Argument 2 is $2"
echo "Argument 3 is $3"
echo "Argument 4 is $4"
echo "Argument 5 is $5"
echo "All of my arguments are $*
echo "the program I just ran is called $0 , but it could also return the exit status of command.."
echo "the number of arguments I gave was $#"
echo "the process ID of this script was $$"

####

All of these features involve using command line options and arguments. To handle options on the command line, we use a facility in the shell called positional parameters. Positional parameters are a series of special variables ($0 through $9) that contain the contents of the command line.

Let's imagine the following command line:

[me@linuxbox me]$ some_program word1 word2 word3

If some_program were a bash shell script, we could read each item on the command line because the positional parameters contain the following:

$0 would contain "some_program"
$1 would contain "word1"
$2 would contain "word2"
$3 would contain "word3"
Here is a script you can use to try this out:

#!/bin/bash

echo "Positional Parameters"
echo '$0 = ' $0
echo '$1 = ' $1
echo '$2 = ' $2
echo '$3 = ' $3

Detecting Command Line Arguments
Often, you will want to check to see if you have arguments on which to act. There are a couple of ways to do this. First, you could simply check to see if $1 contains anything like so:

#!/bin/bash

if [ "$1" != "" ]; then
    echo "Positional parameter 1 contains something"
else
    echo "Positional parameter 1 is empty"
fi

Second, the shell maintains a variable called $# that contains the number of items on the command line in addition to the name of the command ($0).

#!/bin/bash

if [ $# -gt 0 ]; then
    echo "Your command line contains $# arguments"
else
    echo "Your command line contains no arguments"
fi
